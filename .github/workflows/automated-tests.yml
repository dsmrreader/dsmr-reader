name: Automated tests

on:
  push:
    branches:
      - v*
      - development
  pull_request: ~

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - 3.6
          - 3.7
          - 3.8
          - 3.9

    services:
      postgres:
        image: 'postgres:12-alpine'
        ports:
          - 5432
        env:
            POSTGRES_USER: root
            POSTGRES_DB: test_dsmrreader
            POSTGRES_PASSWORD: testpasswd
        options: --health-cmd pg_isready --health-interval 5s --health-timeout 1s --health-retries 10

      mysql:
        image: 'mysql:5.7'
        ports:
          - 3306
        env:
            MYSQL_DATABASE: test_dsmrreader
            MYSQL_ALLOW_EMPTY_PASSWORD: yes
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=1s --health-retries=10

    steps:
      - uses: actions/checkout@v2

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install APT dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext libgettextpo-dev libmariadb-dev-compat libmariadb-dev

      - name: Cached PIP dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: pip-${{ matrix.python-version }}-${{ hashFiles('dsmrreader/provisioning/requirements/base.txt', 'dsmrreader/provisioning/requirements/dev.txt') }}
          restore-keys: pip-${{ matrix.python-version }}-

      - name: Install PIP dependencies
        run: |
          pip install --upgrade pip
          pip install -r $GITHUB_WORKSPACE/dsmrreader/provisioning/requirements/base.txt
          pip install -r $GITHUB_WORKSPACE/dsmrreader/provisioning/requirements/dev.txt
          pip install psycopg2-binary

      - name: Check pylama
        run: pylama

      - name: Check autopep8
        run: autopep8 -r . --diff --exit-code

      - name: Run SQLite tests
        run: py.test --cov --cov-report=xml
        env:
            DJANGO_SETTINGS_MODULE: dsmrreader.config.test
            DJANGO_SECRET_KEY: non-production-value
            DJANGO_DATABASE_ENGINE: django.db.backends.sqlite3

      - name: Run PostgreSQL tests
        run: py.test
        env:
            DJANGO_SETTINGS_MODULE: dsmrreader.config.test
            DJANGO_SECRET_KEY: unsafe-test-value
            DJANGO_DATABASE_ENGINE: django.db.backends.postgresql
            DJANGO_DATABASE_HOST: 127.0.0.1
            DJANGO_DATABASE_PORT: '${{ job.services.postgres.ports[5432] }}'
            DJANGO_DATABASE_NAME: test_dsmrreader
            DJANGO_DATABASE_USER: root
            DJANGO_DATABASE_PASSWORD: testpasswd

      - name: Run MySQL tests
        run: |
          mysql -h $DJANGO_DATABASE_HOST -P $DJANGO_DATABASE_PORT -u $DJANGO_DATABASE_USER -e 'show databases;'
          py.test
        env:
            DJANGO_SETTINGS_MODULE: dsmrreader.config.test
            DJANGO_SECRET_KEY: unsafe-test-value
            DJANGO_DATABASE_ENGINE: django.db.backends.mysql
            DJANGO_DATABASE_HOST: 127.0.0.1
            DJANGO_DATABASE_PORT: '${{ job.services.mysql.ports[3306] }}'
            DJANGO_DATABASE_NAME: dsmrreader  # NOT a typo, django prefixes "test_" automatically.
            DJANGO_DATABASE_USER: root
            DJANGO_DATABASE_PASSWORD: ''

      - name: Code coverage upload
        uses: codecov/codecov-action@v1
